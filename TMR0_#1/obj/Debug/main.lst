                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TIMER0_isr
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _F1
                                     20 	.globl _P
                                     21 	.globl _PS
                                     22 	.globl _PT1
                                     23 	.globl _PX1
                                     24 	.globl _PT0
                                     25 	.globl _PX0
                                     26 	.globl _RD
                                     27 	.globl _WR
                                     28 	.globl _T1
                                     29 	.globl _T0
                                     30 	.globl _INT1
                                     31 	.globl _INT0
                                     32 	.globl _TXD
                                     33 	.globl _RXD
                                     34 	.globl _P3_7
                                     35 	.globl _P3_6
                                     36 	.globl _P3_5
                                     37 	.globl _P3_4
                                     38 	.globl _P3_3
                                     39 	.globl _P3_2
                                     40 	.globl _P3_1
                                     41 	.globl _P3_0
                                     42 	.globl _EA
                                     43 	.globl _ES
                                     44 	.globl _ET1
                                     45 	.globl _EX1
                                     46 	.globl _ET0
                                     47 	.globl _EX0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _SM0
                                     57 	.globl _SM1
                                     58 	.globl _SM2
                                     59 	.globl _REN
                                     60 	.globl _TB8
                                     61 	.globl _RB8
                                     62 	.globl _TI
                                     63 	.globl _RI
                                     64 	.globl _P1_7
                                     65 	.globl _P1_6
                                     66 	.globl _P1_5
                                     67 	.globl _P1_4
                                     68 	.globl _P1_3
                                     69 	.globl _P1_2
                                     70 	.globl _P1_1
                                     71 	.globl _P1_0
                                     72 	.globl _TF1
                                     73 	.globl _TR1
                                     74 	.globl _TF0
                                     75 	.globl _TR0
                                     76 	.globl _IE1
                                     77 	.globl _IT1
                                     78 	.globl _IE0
                                     79 	.globl _IT0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _B
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _control
                                    110 	.globl _counter
                                    111 ;--------------------------------------------------------
                                    112 ; special function registers
                                    113 ;--------------------------------------------------------
                                    114 	.area RSEG    (ABS,DATA)
      000000                        115 	.org 0x0000
                           000080   116 G$P0$0_0$0 == 0x0080
                           000080   117 _P0	=	0x0080
                           000081   118 G$SP$0_0$0 == 0x0081
                           000081   119 _SP	=	0x0081
                           000082   120 G$DPL$0_0$0 == 0x0082
                           000082   121 _DPL	=	0x0082
                           000083   122 G$DPH$0_0$0 == 0x0083
                           000083   123 _DPH	=	0x0083
                           000087   124 G$PCON$0_0$0 == 0x0087
                           000087   125 _PCON	=	0x0087
                           000088   126 G$TCON$0_0$0 == 0x0088
                           000088   127 _TCON	=	0x0088
                           000089   128 G$TMOD$0_0$0 == 0x0089
                           000089   129 _TMOD	=	0x0089
                           00008A   130 G$TL0$0_0$0 == 0x008a
                           00008A   131 _TL0	=	0x008a
                           00008B   132 G$TL1$0_0$0 == 0x008b
                           00008B   133 _TL1	=	0x008b
                           00008C   134 G$TH0$0_0$0 == 0x008c
                           00008C   135 _TH0	=	0x008c
                           00008D   136 G$TH1$0_0$0 == 0x008d
                           00008D   137 _TH1	=	0x008d
                           000090   138 G$P1$0_0$0 == 0x0090
                           000090   139 _P1	=	0x0090
                           000098   140 G$SCON$0_0$0 == 0x0098
                           000098   141 _SCON	=	0x0098
                           000099   142 G$SBUF$0_0$0 == 0x0099
                           000099   143 _SBUF	=	0x0099
                           0000A0   144 G$P2$0_0$0 == 0x00a0
                           0000A0   145 _P2	=	0x00a0
                           0000A8   146 G$IE$0_0$0 == 0x00a8
                           0000A8   147 _IE	=	0x00a8
                           0000B0   148 G$P3$0_0$0 == 0x00b0
                           0000B0   149 _P3	=	0x00b0
                           0000B8   150 G$IP$0_0$0 == 0x00b8
                           0000B8   151 _IP	=	0x00b8
                           0000D0   152 G$PSW$0_0$0 == 0x00d0
                           0000D0   153 _PSW	=	0x00d0
                           0000E0   154 G$ACC$0_0$0 == 0x00e0
                           0000E0   155 _ACC	=	0x00e0
                           0000F0   156 G$B$0_0$0 == 0x00f0
                           0000F0   157 _B	=	0x00f0
                                    158 ;--------------------------------------------------------
                                    159 ; special function bits
                                    160 ;--------------------------------------------------------
                                    161 	.area RSEG    (ABS,DATA)
      000000                        162 	.org 0x0000
                           000080   163 G$P0_0$0_0$0 == 0x0080
                           000080   164 _P0_0	=	0x0080
                           000081   165 G$P0_1$0_0$0 == 0x0081
                           000081   166 _P0_1	=	0x0081
                           000082   167 G$P0_2$0_0$0 == 0x0082
                           000082   168 _P0_2	=	0x0082
                           000083   169 G$P0_3$0_0$0 == 0x0083
                           000083   170 _P0_3	=	0x0083
                           000084   171 G$P0_4$0_0$0 == 0x0084
                           000084   172 _P0_4	=	0x0084
                           000085   173 G$P0_5$0_0$0 == 0x0085
                           000085   174 _P0_5	=	0x0085
                           000086   175 G$P0_6$0_0$0 == 0x0086
                           000086   176 _P0_6	=	0x0086
                           000087   177 G$P0_7$0_0$0 == 0x0087
                           000087   178 _P0_7	=	0x0087
                           000088   179 G$IT0$0_0$0 == 0x0088
                           000088   180 _IT0	=	0x0088
                           000089   181 G$IE0$0_0$0 == 0x0089
                           000089   182 _IE0	=	0x0089
                           00008A   183 G$IT1$0_0$0 == 0x008a
                           00008A   184 _IT1	=	0x008a
                           00008B   185 G$IE1$0_0$0 == 0x008b
                           00008B   186 _IE1	=	0x008b
                           00008C   187 G$TR0$0_0$0 == 0x008c
                           00008C   188 _TR0	=	0x008c
                           00008D   189 G$TF0$0_0$0 == 0x008d
                           00008D   190 _TF0	=	0x008d
                           00008E   191 G$TR1$0_0$0 == 0x008e
                           00008E   192 _TR1	=	0x008e
                           00008F   193 G$TF1$0_0$0 == 0x008f
                           00008F   194 _TF1	=	0x008f
                           000090   195 G$P1_0$0_0$0 == 0x0090
                           000090   196 _P1_0	=	0x0090
                           000091   197 G$P1_1$0_0$0 == 0x0091
                           000091   198 _P1_1	=	0x0091
                           000092   199 G$P1_2$0_0$0 == 0x0092
                           000092   200 _P1_2	=	0x0092
                           000093   201 G$P1_3$0_0$0 == 0x0093
                           000093   202 _P1_3	=	0x0093
                           000094   203 G$P1_4$0_0$0 == 0x0094
                           000094   204 _P1_4	=	0x0094
                           000095   205 G$P1_5$0_0$0 == 0x0095
                           000095   206 _P1_5	=	0x0095
                           000096   207 G$P1_6$0_0$0 == 0x0096
                           000096   208 _P1_6	=	0x0096
                           000097   209 G$P1_7$0_0$0 == 0x0097
                           000097   210 _P1_7	=	0x0097
                           000098   211 G$RI$0_0$0 == 0x0098
                           000098   212 _RI	=	0x0098
                           000099   213 G$TI$0_0$0 == 0x0099
                           000099   214 _TI	=	0x0099
                           00009A   215 G$RB8$0_0$0 == 0x009a
                           00009A   216 _RB8	=	0x009a
                           00009B   217 G$TB8$0_0$0 == 0x009b
                           00009B   218 _TB8	=	0x009b
                           00009C   219 G$REN$0_0$0 == 0x009c
                           00009C   220 _REN	=	0x009c
                           00009D   221 G$SM2$0_0$0 == 0x009d
                           00009D   222 _SM2	=	0x009d
                           00009E   223 G$SM1$0_0$0 == 0x009e
                           00009E   224 _SM1	=	0x009e
                           00009F   225 G$SM0$0_0$0 == 0x009f
                           00009F   226 _SM0	=	0x009f
                           0000A0   227 G$P2_0$0_0$0 == 0x00a0
                           0000A0   228 _P2_0	=	0x00a0
                           0000A1   229 G$P2_1$0_0$0 == 0x00a1
                           0000A1   230 _P2_1	=	0x00a1
                           0000A2   231 G$P2_2$0_0$0 == 0x00a2
                           0000A2   232 _P2_2	=	0x00a2
                           0000A3   233 G$P2_3$0_0$0 == 0x00a3
                           0000A3   234 _P2_3	=	0x00a3
                           0000A4   235 G$P2_4$0_0$0 == 0x00a4
                           0000A4   236 _P2_4	=	0x00a4
                           0000A5   237 G$P2_5$0_0$0 == 0x00a5
                           0000A5   238 _P2_5	=	0x00a5
                           0000A6   239 G$P2_6$0_0$0 == 0x00a6
                           0000A6   240 _P2_6	=	0x00a6
                           0000A7   241 G$P2_7$0_0$0 == 0x00a7
                           0000A7   242 _P2_7	=	0x00a7
                           0000A8   243 G$EX0$0_0$0 == 0x00a8
                           0000A8   244 _EX0	=	0x00a8
                           0000A9   245 G$ET0$0_0$0 == 0x00a9
                           0000A9   246 _ET0	=	0x00a9
                           0000AA   247 G$EX1$0_0$0 == 0x00aa
                           0000AA   248 _EX1	=	0x00aa
                           0000AB   249 G$ET1$0_0$0 == 0x00ab
                           0000AB   250 _ET1	=	0x00ab
                           0000AC   251 G$ES$0_0$0 == 0x00ac
                           0000AC   252 _ES	=	0x00ac
                           0000AF   253 G$EA$0_0$0 == 0x00af
                           0000AF   254 _EA	=	0x00af
                           0000B0   255 G$P3_0$0_0$0 == 0x00b0
                           0000B0   256 _P3_0	=	0x00b0
                           0000B1   257 G$P3_1$0_0$0 == 0x00b1
                           0000B1   258 _P3_1	=	0x00b1
                           0000B2   259 G$P3_2$0_0$0 == 0x00b2
                           0000B2   260 _P3_2	=	0x00b2
                           0000B3   261 G$P3_3$0_0$0 == 0x00b3
                           0000B3   262 _P3_3	=	0x00b3
                           0000B4   263 G$P3_4$0_0$0 == 0x00b4
                           0000B4   264 _P3_4	=	0x00b4
                           0000B5   265 G$P3_5$0_0$0 == 0x00b5
                           0000B5   266 _P3_5	=	0x00b5
                           0000B6   267 G$P3_6$0_0$0 == 0x00b6
                           0000B6   268 _P3_6	=	0x00b6
                           0000B7   269 G$P3_7$0_0$0 == 0x00b7
                           0000B7   270 _P3_7	=	0x00b7
                           0000B0   271 G$RXD$0_0$0 == 0x00b0
                           0000B0   272 _RXD	=	0x00b0
                           0000B1   273 G$TXD$0_0$0 == 0x00b1
                           0000B1   274 _TXD	=	0x00b1
                           0000B2   275 G$INT0$0_0$0 == 0x00b2
                           0000B2   276 _INT0	=	0x00b2
                           0000B3   277 G$INT1$0_0$0 == 0x00b3
                           0000B3   278 _INT1	=	0x00b3
                           0000B4   279 G$T0$0_0$0 == 0x00b4
                           0000B4   280 _T0	=	0x00b4
                           0000B5   281 G$T1$0_0$0 == 0x00b5
                           0000B5   282 _T1	=	0x00b5
                           0000B6   283 G$WR$0_0$0 == 0x00b6
                           0000B6   284 _WR	=	0x00b6
                           0000B7   285 G$RD$0_0$0 == 0x00b7
                           0000B7   286 _RD	=	0x00b7
                           0000B8   287 G$PX0$0_0$0 == 0x00b8
                           0000B8   288 _PX0	=	0x00b8
                           0000B9   289 G$PT0$0_0$0 == 0x00b9
                           0000B9   290 _PT0	=	0x00b9
                           0000BA   291 G$PX1$0_0$0 == 0x00ba
                           0000BA   292 _PX1	=	0x00ba
                           0000BB   293 G$PT1$0_0$0 == 0x00bb
                           0000BB   294 _PT1	=	0x00bb
                           0000BC   295 G$PS$0_0$0 == 0x00bc
                           0000BC   296 _PS	=	0x00bc
                           0000D0   297 G$P$0_0$0 == 0x00d0
                           0000D0   298 _P	=	0x00d0
                           0000D1   299 G$F1$0_0$0 == 0x00d1
                           0000D1   300 _F1	=	0x00d1
                           0000D2   301 G$OV$0_0$0 == 0x00d2
                           0000D2   302 _OV	=	0x00d2
                           0000D3   303 G$RS0$0_0$0 == 0x00d3
                           0000D3   304 _RS0	=	0x00d3
                           0000D4   305 G$RS1$0_0$0 == 0x00d4
                           0000D4   306 _RS1	=	0x00d4
                           0000D5   307 G$F0$0_0$0 == 0x00d5
                           0000D5   308 _F0	=	0x00d5
                           0000D6   309 G$AC$0_0$0 == 0x00d6
                           0000D6   310 _AC	=	0x00d6
                           0000D7   311 G$CY$0_0$0 == 0x00d7
                           0000D7   312 _CY	=	0x00d7
                                    313 ;--------------------------------------------------------
                                    314 ; overlayable register banks
                                    315 ;--------------------------------------------------------
                                    316 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        317 	.ds 8
                                    318 ;--------------------------------------------------------
                                    319 ; internal ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area DSEG    (DATA)
                           000000   322 G$counter$0_0$0==.
      000000                        323 _counter::
      000000                        324 	.ds 2
                           000002   325 G$control$0_0$0==.
      000002                        326 _control::
      000002                        327 	.ds 1
                                    328 ;--------------------------------------------------------
                                    329 ; overlayable items in internal ram
                                    330 ;--------------------------------------------------------
                                    331 ;--------------------------------------------------------
                                    332 ; Stack segment in internal ram
                                    333 ;--------------------------------------------------------
                                    334 	.area SSEG
      000000                        335 __start__stack:
      000000                        336 	.ds	1
                                    337 
                                    338 ;--------------------------------------------------------
                                    339 ; indirectly addressable internal ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area ISEG    (DATA)
                                    342 ;--------------------------------------------------------
                                    343 ; absolute internal ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area IABS    (ABS,DATA)
                                    346 	.area IABS    (ABS,DATA)
                                    347 ;--------------------------------------------------------
                                    348 ; bit data
                                    349 ;--------------------------------------------------------
                                    350 	.area BSEG    (BIT)
                                    351 ;--------------------------------------------------------
                                    352 ; paged external ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area PSEG    (PAG,XDATA)
                                    355 ;--------------------------------------------------------
                                    356 ; uninitialized external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area XSEG    (XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; absolute external ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XABS    (ABS,XDATA)
                                    363 ;--------------------------------------------------------
                                    364 ; initialized external ram data
                                    365 ;--------------------------------------------------------
                                    366 	.area XISEG   (XDATA)
                                    367 	.area HOME    (CODE)
                                    368 	.area GSINIT0 (CODE)
                                    369 	.area GSINIT1 (CODE)
                                    370 	.area GSINIT2 (CODE)
                                    371 	.area GSINIT3 (CODE)
                                    372 	.area GSINIT4 (CODE)
                                    373 	.area GSINIT5 (CODE)
                                    374 	.area GSINIT  (CODE)
                                    375 	.area GSFINAL (CODE)
                                    376 	.area CSEG    (CODE)
                                    377 ;--------------------------------------------------------
                                    378 ; interrupt vector
                                    379 ;--------------------------------------------------------
                                    380 	.area HOME    (CODE)
      000000                        381 __interrupt_vect:
      000000 02r00r00         [24]  382 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  383 	reti
      000004                        384 	.ds	7
      00000B 02r00r00         [24]  385 	ljmp	_TIMER0_isr
                                    386 ;--------------------------------------------------------
                                    387 ; global & static initialisations
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
                                    390 	.area GSINIT  (CODE)
                                    391 	.area GSFINAL (CODE)
                                    392 	.area GSINIT  (CODE)
                                    393 	.globl __sdcc_gsinit_startup
                                    394 	.globl __sdcc_program_startup
                                    395 	.globl __start__stack
                                    396 	.globl __mcs51_genXINIT
                                    397 	.globl __mcs51_genXRAMCLEAR
                                    398 	.globl __mcs51_genRAMCLEAR
                           000000   399 	C$main.c$11$1_0$5 ==.
                                    400 ;	main.c:11: unsigned int counter = 0x00;
      000000 E4               [12]  401 	clr	a
      000001 F5*00            [12]  402 	mov	_counter,a
      000003 F5*01            [12]  403 	mov	(_counter + 1),a
                           000005   404 	C$main.c$12$1_0$5 ==.
                                    405 ;	main.c:12: unsigned char control = 0x00;
      000005 F5*02            [12]  406 	mov	_control,a
                                    407 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  408 	ljmp	__sdcc_program_startup
                                    409 ;--------------------------------------------------------
                                    410 ; Home
                                    411 ;--------------------------------------------------------
                                    412 	.area HOME    (CODE)
                                    413 	.area HOME    (CODE)
      00000E                        414 __sdcc_program_startup:
      00000E 02r00r32         [24]  415 	ljmp	_main
                                    416 ;	return from main will return to caller
                                    417 ;--------------------------------------------------------
                                    418 ; code
                                    419 ;--------------------------------------------------------
                                    420 	.area CSEG    (CODE)
                                    421 ;------------------------------------------------------------
                                    422 ;Allocation info for local variables in function 'TIMER0_isr'
                                    423 ;------------------------------------------------------------
                           000000   424 	G$TIMER0_isr$0$0 ==.
                           000000   425 	C$main.c$14$0_0$2 ==.
                                    426 ;	main.c:14: void TIMER0_isr(void) __interrupt(1){
                                    427 ;	-----------------------------------------
                                    428 ;	 function TIMER0_isr
                                    429 ;	-----------------------------------------
      000000                        430 _TIMER0_isr:
                           000007   431 	ar7 = 0x07
                           000006   432 	ar6 = 0x06
                           000005   433 	ar5 = 0x05
                           000004   434 	ar4 = 0x04
                           000003   435 	ar3 = 0x03
                           000002   436 	ar2 = 0x02
                           000001   437 	ar1 = 0x01
                           000000   438 	ar0 = 0x00
      000000 C0 E0            [24]  439 	push	acc
      000002 C0 D0            [24]  440 	push	psw
                           000004   441 	C$main.c$15$1_0$2 ==.
                                    442 ;	main.c:15: counter++;
      000004 05*00            [12]  443 	inc	_counter
      000006 E4               [12]  444 	clr	a
      000007 B5*00 02         [24]  445 	cjne	a,_counter,00111$
      00000A 05*01            [12]  446 	inc	(_counter + 1)
      00000C                        447 00111$:
                           00000C   448 	C$main.c$17$1_0$2 ==.
                                    449 ;	main.c:17: TH0 = 0x3C;
      00000C 75 8C 3C         [24]  450 	mov	_TH0,#0x3c
                           00000F   451 	C$main.c$18$1_0$2 ==.
                                    452 ;	main.c:18: TL0 = 0xB0;
      00000F 75 8A B0         [24]  453 	mov	_TL0,#0xb0
                           000012   454 	C$main.c$19$1_0$2 ==.
                                    455 ;	main.c:19: if(counter == 12){                      //condicao de funcionalidade a cada 600mS
      000012 74 0C            [12]  456 	mov	a,#0x0c
      000014 B5*00 06         [24]  457 	cjne	a,_counter,00112$
      000017 E4               [12]  458 	clr	a
      000018 B5*01 02         [24]  459 	cjne	a,(_counter + 1),00112$
      00001B 80 02            [24]  460 	sjmp	00113$
      00001D                        461 00112$:
      00001D 80 0E            [24]  462 	sjmp	00103$
      00001F                        463 00113$:
                           00001F   464 	C$main.c$20$2_0$3 ==.
                                    465 ;	main.c:20: control = ~control;
      00001F E5*02            [12]  466 	mov	a,_control
      000021 F4               [12]  467 	cpl	a
                           000022   468 	C$main.c$21$2_0$3 ==.
                                    469 ;	main.c:21: BOARDLED = control;
                                    470 ;	assignBit
      000022 F5*02            [12]  471 	mov	_control,a
      000024 24 FF            [12]  472 	add	a,#0xff
      000026 92 92            [24]  473 	mov	_P1_2,c
                           000028   474 	C$main.c$22$2_0$3 ==.
                                    475 ;	main.c:22: counter = 0x00;
      000028 E4               [12]  476 	clr	a
      000029 F5*00            [12]  477 	mov	_counter,a
      00002B F5*01            [12]  478 	mov	(_counter + 1),a
      00002D                        479 00103$:
                           00002D   480 	C$main.c$24$1_0$2 ==.
                                    481 ;	main.c:24: }
      00002D D0 D0            [24]  482 	pop	psw
      00002F D0 E0            [24]  483 	pop	acc
                           000031   484 	C$main.c$24$1_0$2 ==.
                           000031   485 	XG$TIMER0_isr$0$0 ==.
      000031 32               [24]  486 	reti
                                    487 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    488 ;	eliminated unneeded push/pop dpl
                                    489 ;	eliminated unneeded push/pop dph
                                    490 ;	eliminated unneeded push/pop b
                                    491 ;------------------------------------------------------------
                                    492 ;Allocation info for local variables in function 'main'
                                    493 ;------------------------------------------------------------
                           000032   494 	G$main$0$0 ==.
                           000032   495 	C$main.c$26$1_0$5 ==.
                                    496 ;	main.c:26: void main(void){
                                    497 ;	-----------------------------------------
                                    498 ;	 function main
                                    499 ;	-----------------------------------------
      000032                        500 _main:
                           000032   501 	C$main.c$27$1_0$5 ==.
                                    502 ;	main.c:27: EA = 0x01;                              //Habilita a interrupcao global
                                    503 ;	assignBit
      000032 D2 AF            [12]  504 	setb	_EA
                           000034   505 	C$main.c$28$1_0$5 ==.
                                    506 ;	main.c:28: TR0 = 0x01;                             //Habilita o TIMER0
                                    507 ;	assignBit
      000034 D2 8C            [12]  508 	setb	_TR0
                           000036   509 	C$main.c$29$1_0$5 ==.
                                    510 ;	main.c:29: ET0 = 0x01;                             //Habilita o Overflow do TIMER0
                                    511 ;	assignBit
      000036 D2 A9            [12]  512 	setb	_ET0
                           000038   513 	C$main.c$31$1_0$5 ==.
                                    514 ;	main.c:31: TMOD = 0x01;                            //TIMER0 em Modo 1 (16 bits)
      000038 75 89 01         [24]  515 	mov	_TMOD,#0x01
                           00003B   516 	C$main.c$36$1_0$5 ==.
                                    517 ;	main.c:36: TH0 = 0x3C;
      00003B 75 8C 3C         [24]  518 	mov	_TH0,#0x3c
                           00003E   519 	C$main.c$37$1_0$5 ==.
                                    520 ;	main.c:37: TL0 = 0xB0;
      00003E 75 8A B0         [24]  521 	mov	_TL0,#0xb0
                           000041   522 	C$main.c$39$1_0$5 ==.
                                    523 ;	main.c:39: BOARDLED = 0x00;
                                    524 ;	assignBit
      000041 C2 92            [12]  525 	clr	_P1_2
                           000043   526 	C$main.c$41$1_0$5 ==.
                                    527 ;	main.c:41: while(1){
      000043                        528 00102$:
      000043 80 FE            [24]  529 	sjmp	00102$
                           000045   530 	C$main.c$44$1_0$5 ==.
                                    531 ;	main.c:44: }
                           000045   532 	C$main.c$44$1_0$5 ==.
                           000045   533 	XG$main$0$0 ==.
      000045 22               [24]  534 	ret
                                    535 	.area CSEG    (CODE)
                                    536 	.area CONST   (CODE)
                                    537 	.area XINIT   (CODE)
                                    538 	.area CABS    (ABS,CODE)
